// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zackartz/ttd/ent/timestamp"
)

// TimestampCreate is the builder for creating a Timestamp entity.
type TimestampCreate struct {
	config
	mutation *TimestampMutation
	hooks    []Hook
}

// SetStartTime sets the "start_time" field.
func (tc *TimestampCreate) SetStartTime(t time.Time) *TimestampCreate {
	tc.mutation.SetStartTime(t)
	return tc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tc *TimestampCreate) SetNillableStartTime(t *time.Time) *TimestampCreate {
	if t != nil {
		tc.SetStartTime(*t)
	}
	return tc
}

// SetEndTime sets the "end_time" field.
func (tc *TimestampCreate) SetEndTime(t time.Time) *TimestampCreate {
	tc.mutation.SetEndTime(t)
	return tc
}

// SetActive sets the "active" field.
func (tc *TimestampCreate) SetActive(b bool) *TimestampCreate {
	tc.mutation.SetActive(b)
	return tc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (tc *TimestampCreate) SetNillableActive(b *bool) *TimestampCreate {
	if b != nil {
		tc.SetActive(*b)
	}
	return tc
}

// SetComment sets the "comment" field.
func (tc *TimestampCreate) SetComment(s string) *TimestampCreate {
	tc.mutation.SetComment(s)
	return tc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tc *TimestampCreate) SetNillableComment(s *string) *TimestampCreate {
	if s != nil {
		tc.SetComment(*s)
	}
	return tc
}

// SetCategory sets the "category" field.
func (tc *TimestampCreate) SetCategory(s string) *TimestampCreate {
	tc.mutation.SetCategory(s)
	return tc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tc *TimestampCreate) SetNillableCategory(s *string) *TimestampCreate {
	if s != nil {
		tc.SetCategory(*s)
	}
	return tc
}

// SetProject sets the "project" field.
func (tc *TimestampCreate) SetProject(s string) *TimestampCreate {
	tc.mutation.SetProject(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TimestampCreate) SetID(u uuid.UUID) *TimestampCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TimestampMutation object of the builder.
func (tc *TimestampCreate) Mutation() *TimestampMutation {
	return tc.mutation
}

// Save creates the Timestamp in the database.
func (tc *TimestampCreate) Save(ctx context.Context) (*Timestamp, error) {
	var (
		err  error
		node *Timestamp
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimestampMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TimestampCreate) SaveX(ctx context.Context) *Timestamp {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (tc *TimestampCreate) defaults() {
	if _, ok := tc.mutation.StartTime(); !ok {
		v := timestamp.DefaultStartTime()
		tc.mutation.SetStartTime(v)
	}
	if _, ok := tc.mutation.Active(); !ok {
		v := timestamp.DefaultActive
		tc.mutation.SetActive(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := timestamp.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TimestampCreate) check() error {
	if _, ok := tc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New("ent: missing required field \"start_time\"")}
	}
	if _, ok := tc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New("ent: missing required field \"end_time\"")}
	}
	if _, ok := tc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New("ent: missing required field \"active\"")}
	}
	if _, ok := tc.mutation.Project(); !ok {
		return &ValidationError{Name: "project", err: errors.New("ent: missing required field \"project\"")}
	}
	return nil
}

func (tc *TimestampCreate) sqlSave(ctx context.Context) (*Timestamp, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (tc *TimestampCreate) createSpec() (*Timestamp, *sqlgraph.CreateSpec) {
	var (
		_node = &Timestamp{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: timestamp.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: timestamp.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timestamp.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := tc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timestamp.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := tc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: timestamp.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := tc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldComment,
		})
		_node.Comment = value
	}
	if value, ok := tc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldCategory,
		})
		_node.Category = value
	}
	if value, ok := tc.mutation.Project(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldProject,
		})
		_node.Project = value
	}
	return _node, _spec
}

// TimestampCreateBulk is the builder for creating many Timestamp entities in bulk.
type TimestampCreateBulk struct {
	config
	builders []*TimestampCreate
}

// Save creates the Timestamp entities in the database.
func (tcb *TimestampCreateBulk) Save(ctx context.Context) ([]*Timestamp, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Timestamp, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimestampMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TimestampCreateBulk) SaveX(ctx context.Context) []*Timestamp {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
