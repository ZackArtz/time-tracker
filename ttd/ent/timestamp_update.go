// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zackartz/ttd/ent/predicate"
	"github.com/zackartz/ttd/ent/timestamp"
)

// TimestampUpdate is the builder for updating Timestamp entities.
type TimestampUpdate struct {
	config
	hooks    []Hook
	mutation *TimestampMutation
}

// Where adds a new predicate for the TimestampUpdate builder.
func (tu *TimestampUpdate) Where(ps ...predicate.Timestamp) *TimestampUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetStartTime sets the "start_time" field.
func (tu *TimestampUpdate) SetStartTime(t time.Time) *TimestampUpdate {
	tu.mutation.SetStartTime(t)
	return tu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tu *TimestampUpdate) SetNillableStartTime(t *time.Time) *TimestampUpdate {
	if t != nil {
		tu.SetStartTime(*t)
	}
	return tu
}

// SetEndTime sets the "end_time" field.
func (tu *TimestampUpdate) SetEndTime(t time.Time) *TimestampUpdate {
	tu.mutation.SetEndTime(t)
	return tu
}

// SetActive sets the "active" field.
func (tu *TimestampUpdate) SetActive(b bool) *TimestampUpdate {
	tu.mutation.SetActive(b)
	return tu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (tu *TimestampUpdate) SetNillableActive(b *bool) *TimestampUpdate {
	if b != nil {
		tu.SetActive(*b)
	}
	return tu
}

// SetComment sets the "comment" field.
func (tu *TimestampUpdate) SetComment(s string) *TimestampUpdate {
	tu.mutation.SetComment(s)
	return tu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tu *TimestampUpdate) SetNillableComment(s *string) *TimestampUpdate {
	if s != nil {
		tu.SetComment(*s)
	}
	return tu
}

// ClearComment clears the value of the "comment" field.
func (tu *TimestampUpdate) ClearComment() *TimestampUpdate {
	tu.mutation.ClearComment()
	return tu
}

// SetCategory sets the "category" field.
func (tu *TimestampUpdate) SetCategory(s string) *TimestampUpdate {
	tu.mutation.SetCategory(s)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *TimestampUpdate) SetNillableCategory(s *string) *TimestampUpdate {
	if s != nil {
		tu.SetCategory(*s)
	}
	return tu
}

// ClearCategory clears the value of the "category" field.
func (tu *TimestampUpdate) ClearCategory() *TimestampUpdate {
	tu.mutation.ClearCategory()
	return tu
}

// SetProject sets the "project" field.
func (tu *TimestampUpdate) SetProject(s string) *TimestampUpdate {
	tu.mutation.SetProject(s)
	return tu
}

// Mutation returns the TimestampMutation object of the builder.
func (tu *TimestampUpdate) Mutation() *TimestampMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TimestampUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimestampMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimestampUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimestampUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimestampUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TimestampUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timestamp.Table,
			Columns: timestamp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: timestamp.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timestamp.FieldStartTime,
		})
	}
	if value, ok := tu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timestamp.FieldEndTime,
		})
	}
	if value, ok := tu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: timestamp.FieldActive,
		})
	}
	if value, ok := tu.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldComment,
		})
	}
	if tu.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timestamp.FieldComment,
		})
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldCategory,
		})
	}
	if tu.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timestamp.FieldCategory,
		})
	}
	if value, ok := tu.mutation.Project(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldProject,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timestamp.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TimestampUpdateOne is the builder for updating a single Timestamp entity.
type TimestampUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimestampMutation
}

// SetStartTime sets the "start_time" field.
func (tuo *TimestampUpdateOne) SetStartTime(t time.Time) *TimestampUpdateOne {
	tuo.mutation.SetStartTime(t)
	return tuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (tuo *TimestampUpdateOne) SetNillableStartTime(t *time.Time) *TimestampUpdateOne {
	if t != nil {
		tuo.SetStartTime(*t)
	}
	return tuo
}

// SetEndTime sets the "end_time" field.
func (tuo *TimestampUpdateOne) SetEndTime(t time.Time) *TimestampUpdateOne {
	tuo.mutation.SetEndTime(t)
	return tuo
}

// SetActive sets the "active" field.
func (tuo *TimestampUpdateOne) SetActive(b bool) *TimestampUpdateOne {
	tuo.mutation.SetActive(b)
	return tuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (tuo *TimestampUpdateOne) SetNillableActive(b *bool) *TimestampUpdateOne {
	if b != nil {
		tuo.SetActive(*b)
	}
	return tuo
}

// SetComment sets the "comment" field.
func (tuo *TimestampUpdateOne) SetComment(s string) *TimestampUpdateOne {
	tuo.mutation.SetComment(s)
	return tuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tuo *TimestampUpdateOne) SetNillableComment(s *string) *TimestampUpdateOne {
	if s != nil {
		tuo.SetComment(*s)
	}
	return tuo
}

// ClearComment clears the value of the "comment" field.
func (tuo *TimestampUpdateOne) ClearComment() *TimestampUpdateOne {
	tuo.mutation.ClearComment()
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *TimestampUpdateOne) SetCategory(s string) *TimestampUpdateOne {
	tuo.mutation.SetCategory(s)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *TimestampUpdateOne) SetNillableCategory(s *string) *TimestampUpdateOne {
	if s != nil {
		tuo.SetCategory(*s)
	}
	return tuo
}

// ClearCategory clears the value of the "category" field.
func (tuo *TimestampUpdateOne) ClearCategory() *TimestampUpdateOne {
	tuo.mutation.ClearCategory()
	return tuo
}

// SetProject sets the "project" field.
func (tuo *TimestampUpdateOne) SetProject(s string) *TimestampUpdateOne {
	tuo.mutation.SetProject(s)
	return tuo
}

// Mutation returns the TimestampMutation object of the builder.
func (tuo *TimestampUpdateOne) Mutation() *TimestampMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TimestampUpdateOne) Select(field string, fields ...string) *TimestampUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Timestamp entity.
func (tuo *TimestampUpdateOne) Save(ctx context.Context) (*Timestamp, error) {
	var (
		err  error
		node *Timestamp
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimestampMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimestampUpdateOne) SaveX(ctx context.Context) *Timestamp {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TimestampUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimestampUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TimestampUpdateOne) sqlSave(ctx context.Context) (_node *Timestamp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timestamp.Table,
			Columns: timestamp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: timestamp.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Timestamp.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timestamp.FieldID)
		for _, f := range fields {
			if !timestamp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timestamp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timestamp.FieldStartTime,
		})
	}
	if value, ok := tuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timestamp.FieldEndTime,
		})
	}
	if value, ok := tuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: timestamp.FieldActive,
		})
	}
	if value, ok := tuo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldComment,
		})
	}
	if tuo.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timestamp.FieldComment,
		})
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldCategory,
		})
	}
	if tuo.mutation.CategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: timestamp.FieldCategory,
		})
	}
	if value, ok := tuo.mutation.Project(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timestamp.FieldProject,
		})
	}
	_node = &Timestamp{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timestamp.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
