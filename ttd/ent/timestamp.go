// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zackartz/ttd/ent/timestamp"
)

// Timestamp is the model entity for the Timestamp schema.
type Timestamp struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Project holds the value of the "project" field.
	Project string `json:"project,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Timestamp) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case timestamp.FieldActive:
			values[i] = new(sql.NullBool)
		case timestamp.FieldComment, timestamp.FieldCategory, timestamp.FieldProject:
			values[i] = new(sql.NullString)
		case timestamp.FieldStartTime, timestamp.FieldEndTime:
			values[i] = new(sql.NullTime)
		case timestamp.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Timestamp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Timestamp fields.
func (t *Timestamp) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timestamp.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case timestamp.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				t.StartTime = value.Time
			}
		case timestamp.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				t.EndTime = value.Time
			}
		case timestamp.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				t.Active = value.Bool
			}
		case timestamp.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				t.Comment = value.String
			}
		case timestamp.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				t.Category = value.String
			}
		case timestamp.FieldProject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project", values[i])
			} else if value.Valid {
				t.Project = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Timestamp.
// Note that you need to call Timestamp.Unwrap() before calling this method if this Timestamp
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Timestamp) Update() *TimestampUpdateOne {
	return (&TimestampClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Timestamp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Timestamp) Unwrap() *Timestamp {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Timestamp is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Timestamp) String() string {
	var builder strings.Builder
	builder.WriteString("Timestamp(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", start_time=")
	builder.WriteString(t.StartTime.Format(time.ANSIC))
	builder.WriteString(", end_time=")
	builder.WriteString(t.EndTime.Format(time.ANSIC))
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", t.Active))
	builder.WriteString(", comment=")
	builder.WriteString(t.Comment)
	builder.WriteString(", category=")
	builder.WriteString(t.Category)
	builder.WriteString(", project=")
	builder.WriteString(t.Project)
	builder.WriteByte(')')
	return builder.String()
}

// Timestamps is a parsable slice of Timestamp.
type Timestamps []*Timestamp

func (t Timestamps) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
